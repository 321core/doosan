// main.js

$(function(){
	///////////////////////////////////////////////////////////////////////////////
	//// data
	var streams = [];
	
	$.ajax({
			url: "http://keti3.oktree.com:8080/dashboard/getAllStreams/",
			dataType: "jsonp",
			success: function( streams_ ) {
				streams = streams_;
				// 화면 표시
				$("body").fadeIn(500);

			},
			error: function( ajaxContext ) {
				alert( "데이터 수신에 실패하였습니다. 페이지를 다시 로드하십시오.\n(에러: " + ajaxContext.responseText + ")" );
			}
	});
	
	
	///////////////////////////////////////////////////////////////////////////////
	//// States
	var		 tabIndex        = 0;
	var      matchedStreams  = [];
	var      selectedStreams = [];
	var      metricBadgeValue = 0;
	var      startDateTime    = null;
	var      endDateTime      = null;
	
	var      MAX_ENTRIES_PER_PAGE = 20;
	var      VISIBLE_PAGES        = 5;
	var      maxPages             = 0;
	var      currentPage          = 0;
	
	///////////////////////////////////////////////////////////////////////////////
	//// Methods

	function selectTab( index ) 
	{
		if ( index == 0 ) {
	    	$("#tab1").addClass( "active" );
	    	$("#tab2").removeClass( "active" );
	    	$("#tab3").removeClass( "active" );
	    	
	    	$("#searchPage").show();
	    	$("#metricsPage").hide();
	    	$("#chartPage").hide();
	    	
	    	//
	    	initSearchPage();
		}
		else if ( index == 1 ) {
	    	$("#tab1").removeClass( "active" );
	    	$("#tab2").addClass( "active" );
	    	$("#tab3").removeClass( "active" );
	
	    	$("#searchPage").hide();
	    	$("#metricsPage").show();
	    	$("#chartPage").hide();
	    	
	    	//
	    	metricBadgeValue = 0;
	    	updateMetricBadgeValue();
	    	updateSelectedMetrics();
		}
		else {
	    	$("#tab1").removeClass( "active" );
	    	$("#tab2").removeClass( "active" );
	    	$("#tab3").addClass( "active" );
	    	
	    	$("#searchPage").hide();
	    	$("#metricsPage").hide();
	    	$("#chartPage").show();
	    	
	    	//
	    	updateChart();
	    	
		}
		
		tabIndex = index;
	}
	
	
	function initSearchPage()
	{
		updateSearchResult();		
	}
	
	function searchButtonFired()
	{
		var text = $("#searchText").val().trim();
		search( text );
		updateSearchResult()
	}
	
	
	function streamShouldBeMatchedByKeyword( stream, keyword )
	{
		keyword = keyword.toLowerCase();
		if ( keyword.length > 0 ) {
			// 메트릭 명에 걸리는가?
			if ( stream.metric.toLowerCase().indexOf( keyword ) >= 0 ) {
				return true;
			}
			// 건물명에 걸리는가?
			if ( stream.buildingName ) {
				if ( stream.buildingName.toLowerCase().indexOf( keyword ) >= 0 ) {
					return true;
				}
			}
			// 키워드 중에 걸리는가?
			for( var i = 0; i < stream.keywords.length; ++i ) {
				if ( stream.keywords[i].toLowerCase().indexOf( keyword ) >= 0 ) {
					return true;
				}
			}
		}		
		return false;
	}


	function keywordsFromInputText( text )
	{
		arr = text.split( " " );
		for( var i = 0; i < arr.length; ++i ) {
			arr[i] = arr[i].trim();
		}
		return arr;
	}	

	
	function search( text )
	{
		keywords = keywordsFromInputText( text );

		matchedStreams = [];
		
		// 스트림 별로, 키워드 몇개와 매칭되는지 구한다.		
		for( var i = 0; i < streams.length; ++i ) {
			var score = 0;
			var s = streams[i];
			for ( var j = 0; j < keywords.length; ++j ) {
				if ( streamShouldBeMatchedByKeyword( s, keywords[j] ) ) {
					score += 1;
				} else {
					break;
				}			
			}
			// 모든 키워드를 만족하는 스트림만 추가한다.
			if ( score == keywords.length ) {
				matchedStreams.push( s );
			}
		}

		// 페이지 수를 계산함.		
		maxPages    = Math.floor( ( matchedStreams.length + MAX_ENTRIES_PER_PAGE -1 ) / MAX_ENTRIES_PER_PAGE );
		currentPage = 0;
		updatePageNavigator();
	}
	
	
	function pageNavigatorClicked( page )
	{
		currentPage = page;
		updatePageNavigator();
		updateSearchResult();
	}
	
	
	function prevPageClicked()
	{
		var nextPage = currentPage - 10;
		if ( nextPage < 0 ) {
			nextPage = 0;
		}
		
		pageNavigatorClicked( nextPage );
	}
	
	
	function nextPageClicked()
	{
		var nextPage = currentPage + 10;
		if ( nextPage >= maxPages ) {
			nextPage = maxPages - 1;
		}
		
		pageNavigatorClicked( nextPage );
	}
	
	
	function updatePageNavigator()
	{
		if ( maxPages == 0 ) {
			$("#pageNavigator").hide();
			
		}
		else {
			var startPage = currentPage - 2;
			if ( startPage < 0 ) {
				startPage = 0;
			}
			
			var endPage = startPage + 5;
			if ( endPage > maxPages ) {
				endPage = maxPages;
			}
			
			var pageNav = $( "#pageNavigator" );
			pageNav.empty();
			
			var html = '<li id="prevPage"><a>&laquo;</a></li>';
			for ( var i = startPage; i < endPage; ++i ) {
				var anchorID = "page" + i;
				html += '<li><a id=' + anchorID  + ' data-page=' + i + '>' + ( i + 1 ) + '</a></li>';
			}
			html += '<li id="nextPage"><a>&raquo;</a></li></ul>';
			
			pageNav.html( html );
			// 페이지 인디케이터
			for ( var i = startPage; i < endPage; ++i ) {
				var anchorID = "page" + i;
				$("#" + anchorID).click( function() {
					var page = $(this).data( "page" );
					pageNavigatorClicked( page );
				});
				
				if ( i == currentPage ) {
					$("#" + anchorID).parent().addClass( "active" );
				}
			}
			
			$("#prevPage").click( prevPageClicked );
			if ( startPage == 0 ) {
				$("#prevPage").addClass( "disabled" );
			}
			$("#nextPage").click( nextPageClicked );
			if ( endPage == maxPages ) {
				$("#nextPage").addClass( "disabled" );
			}
			
			//
			$("#pageNavigator").show();
		}
	}
	
	function updateSearchResult()
	{
		if ( matchedStreams.length == 0 ) {
			$("#searchResultCount").html( "검색결과가 없습니다.");
			$("#searchResultContainer").html( "" );
		}
		else {
			$("#searchResultCount").html( "총 " + matchedStreams.length + " 건이 검색되었습니다." );
			$("#searchResultContainer").html( "" );
			txt = "";
			
			// 화면에 표시해야 하는 인덱스를 구한다.
			var startIndex = currentPage * MAX_ENTRIES_PER_PAGE;
			var endIndex   = startIndex + MAX_ENTRIES_PER_PAGE;
			if ( endIndex > matchedStreams.length ) {
				endIndex = matchedStreams.length;
			}
			
			// 화면에 추가한다.
			for ( var i = startIndex; i < endIndex; ++i ) {
				var stream = matchedStreams[i];
				var moreID = 'more' + i;
				var buttonID = "addButton" + i;
				var moreButtonID = "moreButton" + i;
				var keywordText = "";
				for ( var j = 0; j < stream.keywords.length; ++j ) {
					keywordText += '<span class="label label-info">' + stream.keywords[j] + '</span>';
				}
				
				var moreFlag = ( stream.tags.length > 0 || stream.keywords.length > 0 || stream.buildingName || stream.picture );
				
				txt += '<a class="list-group-item">' +
					       '<dl class="dl-horizontal">' +
						   '<dt>metric</dt>' +
						   '<dd>' + stream.metric + '</dd>';
						   
				if ( stream.tags.length > 0 ) {
					txt += '<dt>tags</dt><dd>' + stream.tags.join(',') + '</dd>';
				}
				
				if ( moreFlag ) {
					txt += '<div id="' + moreID + '" class="collapse">';
				
					if ( stream.keywords.length > 0 ) {
						txt += '<dt>keywords</dt><dd>' + keywordText + '</dd>';
					}
								
					if ( stream.buildingName ) {
						txt += '<dt>Building</dt><dd>' + stream.buildingName  + '</dd>';
						
					}
					if ( stream.picture ) {
						txt += '<dt>picture</dt><dd><image src="' + stream.picture + '"></image></dd>';
					}

					txt += '</div>';
				}
				
				txt += '</dl>';
				
				txt += '<div class="row">' +
				       '<div class="btn-group btn-group-sm col-md-offset-10">' +
				       '<button id="' + buttonID + '" data-index=' + i + ' type="button" class="btn btn-default"><span class="glyphicon glyphicon-plus"></span> Add</button>';
				
				txt += '<button id="' + moreButtonID + '" type="button" class="btn btn-default" data-toggle="collapse" href="#' + moreID + '"><span class="glyphicon glyphicon-eye-open"></span> More</button>';
				
				txt += '</div></div></a>';
			}
			
			$("#searchResultContainer").html( txt );
			
			// add button 에 이벤트 핸들러 추가함.
			for( var i = startIndex; i < endIndex; ++i ) {
				var buttonID = "addButton" + i;
				var moreButtonID = "moreButton" + i;
				var stream   = matchedStreams[i];
				var moreFlag = ( stream.tags.length > 0 || stream.keywords.length > 0 || stream.buildingName || stream.picture );
				
				// more 버튼을 disable 할 것인가?
				if ( !moreFlag ) {
					$( "#" + moreButtonID ).addClass( "disabled" );
				}
				// 이미 추가되어 있다면 disable
				if ( selectedStreams.indexOf( stream ) >= 0 ) {
					$( "#" + buttonID ).prop( "disabled", true );
				}
				else {
					$( "#" + buttonID ).click( function( ev ){
						var itemIndex = $(this).data( 'index' );
						// 검색 아이템을 하나 추가한다.
						selectStream( matchedStreams[ itemIndex ] );
						// 자신을 disable 시킨다.
						$(this).prop( "disabled", true );
					});
				}
			}
		}
	}
	
	
	function selectStream( stream )
	{
		if ( selectedStreams.indexOf( stream ) < 0 ) {
			selectedStreams.push( stream );
			metricBadgeValue += 1;
			updateMetricBadgeValue();
		}
	}
	
	
	function unselectStreamByIndex( index )
	{
		selectedStreams.splice( index, 1 );
	}
	
	
	function updateMetricBadgeValue()
	{
		if ( metricBadgeValue == 0 ) {
			$("#metricBadge").hide();
		}
		else {
			$("#metricBadge").html( "" + metricBadgeValue );
			$("#metricBadge").show();
		}
	}
	
	
	function updateSelectedMetrics()
	{
		if ( selectedStreams.length == 0 ) {
			$("#selectedMetricsCount").html( "선택된 메트릭이 없습니다.");
			$("#selectedMetricsContainer").html( "" );
		}
		else {
			$("#selectedMetricsCount").html( "총 " + selectedStreams.length + " 건을 선택하였습니다." );
			$("#selectedMetricsContainer").html( "" );
			txt = "";
			
			for ( var i = 0; i < selectedStreams.length; ++i ) {
				var stream = selectedStreams[i];
				var buttonID = "removeButton" + i;
				var keywordText = "";
				for ( var j = 0; j < stream.keywords.length; ++j ) {
					keywordText += '<span class="label label-info">' + stream.keywords[j] + '</span>';
				}
				
				txt += '<a class="list-group-item">' +
						   '<button id="' + buttonID + '" data-index="' + i + '" type="button" class="close" aria-hidden="true">&times;</button>' +
					       '<dl class="dl-horizontal">' +
						   '<dt>metric</dt>' +
						   '<dd>' + stream.metric + '</dd>' +
						   '<dt>tags</dt>' +
						   '<dd>' + stream.tags.join(',') + '</dd>' +
						   '<dt>keywords</dt>' +
						   '<dd>' + keywordText + '</dd>';

				if ( stream.buildingName ) {
					txt += '<dt>Building</dt><dd>' + stream.buildingName  + '</dd>';
				}						   
				if ( stream.picture ) {
					txt += '<dt>picture</dt><dd><image src="' + stream.picture + '"></image></dd>';
					
				}				
				txt += '</dl></a>';
			}
			
			$("#selectedMetricsContainer").html( txt );
			
			// remove button 에 이벤트 핸들러 추가함.
			for( var i = 0; i < selectedStreams.length; ++i ) {
				var buttonID = "removeButton" + i;
				$( "#" + buttonID ).click( function( ev ){
					var itemIndex = $(this).data( 'index' );
					// 검색 아이템을 삭제 추가한다.
					unselectStreamByIndex( itemIndex );
					
					// 목록을 다시 그린다.
					updateSelectedMetrics();
				});
			}
		}
	}
	
	
	function formatDate( t )
	{
		function fmt(m) {
			return (m<=9 ? '0' + m : m);
		}
		return t.getFullYear() + "/" + fmt( t.getMonth()+1 ) + "/" + fmt( t.getDate() ) + "-" + fmt( t.getHours() ) + ":" + fmt( t.getMinutes() ) + ":" + fmt( t.getSeconds() );
	}
	
	
	function startDateTimeChanged()
	{
		startDateTime = new Date( $("#startDateTimePicker").data( "DateTimePicker").date.valueOf() );
		updateChart();
	}
	
	
	function endDateTimeChanged()
	{
		endDateTime = new Date( $("#endDateTimePicker").data( "DateTimePicker").date.valueOf() );
		updateChart();
	}
	
	
	function chartQueryForStreams( startDateTime, endDateTime, streams, scale )
	{
		var width  = Math.floor( 1024 * scale );
		var height = Math.floor( 512 * scale );
		
		
		var query = "http://keti3.oktree.com:4242/q?start=" + formatDate( startDateTime ) + 
		            "&end=" + formatDate( endDateTime );
		            
		for( var i = 0; i < streams.length; ++i ) {
			var s = streams[i];
			query += "&m=avg:" + s.metric;
			
			if ( s.tags.length > 0 ) {
				query += "{";
				for ( var j = 0; j < s.tags.length; ++j ) {
					query += s.tags[j];
					if ( j < s.tags.length - 1 ) {
						query += ",";
					}
				}
				query += "}";
			}
			
			query += "&o=";
		}

		query += "&wxh=" + width + "x" + height + "&png";		
		return query;
	}
	
	function asciiQueryForStreams( startDateTime, endDateTime, streams )
	{
		var query = "http://keti3.oktree.com:8080/dashboard/queryJSONP/?start=" + formatDate( startDateTime ) + 
		            "&end=" + formatDate( endDateTime );
		            
		for( var i = 0; i < streams.length; ++i ) {
			var s = streams[i];
			query += "&m=avg:" + s.metric;
			
			if ( s.tags.length > 0 ) {
				query += "{";
				for ( var j = 0; j < s.tags.length; ++j ) {
					query += s.tags[j];
					if ( j < s.tags.length - 1 ) {
						query += ",";
					}
				}
				query += "}";
			}
			
			query += "&o=";
		}

		query += "&ascii";		
		return query;
	}	
	
	function updateChart()
	{
		$("#chart").empty();
		
		// 검색 기간 설정 (자동)
		if ( null == endDateTime ) {
			endDateTime = new Date();
			$("#endDateTimePicker").data( "DateTimePicker" ).setDate( endDateTime );
		}
		if ( null == startDateTime ) {
			startDateTime = new Date( endDateTime );
			startDateTime.setDate( endDateTime.getDate()-1 );
			$("#startDateTimePicker").data( "DateTimePicker" ).setDate( startDateTime );
		}
		
		// 챠트 이미지를 생성한다.
		if ( selectedStreams.length > 0 ) {
			
			// 유틸 함수를 정의
			function addChartPanel( title, name, streams ) {
				var collapseName = name + "Collapse";
				var imageName    = name + "Image";
				var loadingName  = name + "Loading";
				var bodyName     = name + "Body";
				var anchorName   = name + "Anchor";
				var saveButtonName = name + "SaveButton";
							
				var html = '<div class="panel panel-default">' + 
				              '<div class="panel-heading">'    +
	                             '<h4 class="panel-title">'    + 
	                                '<a id="' + anchorName + '" data-toggle="collapse" data-parent="#chart" href="#' + collapseName + '">' +
	                                    title + 
									'</a>' +
								 '</h4>' +
							  '</div>' +
							  '<div id="' + collapseName + '" class="panel-collapse collapse">' +
	  						     '<div id="' + bodyName + '" class="panel-body">' + 
	  						     	// 일단은 로딩을 보여준다.
	  							 	'<div id="' + loadingName + '" class="progress progress-striped active">' +
	  							 	'<div class="progress-bar" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%"></div></div>' +
	  						     
	  							 '</div>' +
	  						  '</div>' +
	  						'</div>';
	  
	  			$("#chart").append( html );
	  
				var img = $('<img id="' + imageName + '">');
				img.attr( 'src', chartQueryForStreams( startDateTime, endDateTime, streams, 1.0 ) );
				img.appendTo( '#' + bodyName );		
				$("#" + imageName ).load(function(){
					// 로딩바를 가린다.
					$("#" + loadingName).hide();
				});
				
				//
				$("#" + bodyName).append( '<button id="' + saveButtonName + '" type="button" class="btn btn-primary">Save</button>' );
				$("#" + saveButtonName ).tooltip( {
					title : "IE, Chrome 등 일부 브라우저에서 사용 가능합니다."
				});
				$("#" + saveButtonName ).click( function() {
					saveStreams( "result.csv", startDateTime, endDateTime, streams );
				});

			};
			
			// 메트릭 갯수에 따라 달리 처리한다.
			if ( selectedStreams.length > 1 ) {
				// 모든 메트릭이 함께 나오는 패널을 추가한다.
				addChartPanel( "전체", "chartAll", selectedStreams );
				
				// 각 메트릭이 나오는 패널을 추가한다.
				for( var i = 0; i < selectedStreams.length; ++i ) {
					var s = selectedStreams[i];
					var title = s.metric;
					if ( s.tags ) {
						title += " {" + s.tags + "}";
					}
					addChartPanel( title, "chart-" + i, [ s ] );
				}
				
				// 1초 후에 전체를 열어준다.
				setTimeout( function(){
					$( "#chartAllAnchor" ).trigger( "click" );
				}, 1000 );
			}	
			else {
				var s = selectedStreams[0];
				var title = s.metric;
				if ( s.tags ) {
					title += " {" + s.tags + "}";
				}

				// 모든 메트릭이 함께 나오는 패널을 추가한다.
				addChartPanel( title, "chartAll", [s] );
				
				// 1초 후에 전체를 열어준다.
				setTimeout( function(){
					$( "#chartAllAnchor" ).trigger( "click" );
				}, 1000 );
			}
	
		}
		else {
			var text = $( "<p class='text-muted'>선택된 메트릭이 없습니다.</p>" );
			text.appendTo( "#chart" );
		}
	}
	
	
	function saveStreams( title, startDateTime, endDateTime, streams )
	{
		var query = asciiQueryForStreams( startDateTime, endDateTime, streams );
		alert( "TSD 로 ascii 데이터를 요청합니다.\n(쿼리: " + query + ")" );
		$.ajax({
			url: query,
			dataType: "jsonp",
			success: function( lines ) {
				var text = "";
				for ( var i = 0; i < lines.length; ++i ) {
					var line = lines[i];
					for ( var j = 0; j < line.length; ++j ) {
						var s = line[j];
						
						if ( j < line.length - 1 ) {
							text += s + ",";
						}
						else {
							text += s + "\n";
						}
					}
				}
				//
				var blob = new Blob( [ text ], {type:"text/plain;charset=utf-8"});
				saveAs( blob, title );
				alert ( "저장되었습니다.\n(파일명: " + title + ")" );
			},
			error: function( ajaxContext ) {
				console.log( ajaxContext );
				alert( "데이터 수신에 실패하였습니다.\n(에러: " + ajaxContext.responseText + ")" );
			}
		});
	}
	
	///////////////////////////////////////////////////////////////////////////////
	//// Entry points
	
	// 탭을 처리한다.
	$("#tab1 a").click(function(){
    	selectTab(0);	
	});
	$("#tab2 a").click(function(){
    	selectTab(1);	
	});
	$("#tab3 a").click(function(){
    	selectTab(2);	
	});
	selectTab(0);
	
	// 검색 버튼
	$.fn.enterKey = function (fnc) {
	    return this.each(function () {
	        $(this).keypress(function (ev) {
	            var keycode = (ev.keyCode ? ev.keyCode : ev.which);
	            if (keycode == '13') {
	                fnc.call(this, ev);
	            }
	        })
	    })
	};
	
	$("#searchText").on( 'input', function(){
		searchButtonFired();
	});
	
	// 날짜 컨트롤 생성
	$("#startDateTimePicker").datetimepicker({
		language: 'ko'
	});
	$("#endDateTimePicker").datetimepicker({
		language: 'ko'
	});
	$("#startDateTimePicker").on( "change.dp", function(e){
		startDateTimeChanged();
	});
	$("#endDateTimePicker").on( "change.dp", function(e){
		endDateTimeChanged();
	});
	
	//
	$("#dropDownButton").tooltip( {
		title : "아직 구현 중입니다."
	});
});
		